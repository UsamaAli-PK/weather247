# Generated by Django 5.2.5 on 2025-08-12 19:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Cities',
                'unique_together': {('name', 'country')},
            },
        ),
        migrations.CreateModel(
            name='AirQualityData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aqi', models.IntegerField(help_text='Air Quality Index')),
                ('co', models.FloatField(help_text='Carbon monoxide (μg/m³)')),
                ('no', models.FloatField(help_text='Nitrogen monoxide (μg/m³)')),
                ('no2', models.FloatField(help_text='Nitrogen dioxide (μg/m³)')),
                ('o3', models.FloatField(help_text='Ozone (μg/m³)')),
                ('so2', models.FloatField(help_text='Sulphur dioxide (μg/m³)')),
                ('pm2_5', models.FloatField(help_text='Fine particles matter (μg/m³)')),
                ('pm10', models.FloatField(help_text='Coarse particulate matter (μg/m³)')),
                ('nh3', models.FloatField(help_text='Ammonia (μg/m³)')),
                ('data_source', models.CharField(default='openweathermap', max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='air_quality_data', to='weather_data.city')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(help_text='Temperature in Celsius')),
                ('feels_like', models.FloatField(help_text='Feels like temperature in Celsius')),
                ('humidity', models.IntegerField(help_text='Humidity percentage')),
                ('pressure', models.FloatField(help_text='Atmospheric pressure in hPa')),
                ('visibility', models.FloatField(blank=True, help_text='Visibility in km', null=True)),
                ('uv_index', models.FloatField(blank=True, help_text='UV index', null=True)),
                ('wind_speed', models.FloatField(help_text='Wind speed in km/h')),
                ('wind_direction', models.IntegerField(help_text='Wind direction in degrees')),
                ('weather_condition', models.CharField(help_text='Main weather condition', max_length=50)),
                ('weather_description', models.CharField(help_text='Weather description', max_length=100)),
                ('weather_icon', models.CharField(help_text='Weather icon code', max_length=10)),
                ('cloudiness', models.IntegerField(help_text='Cloudiness percentage')),
                ('sunrise', models.DateTimeField(blank=True, null=True)),
                ('sunset', models.DateTimeField(blank=True, null=True)),
                ('data_source', models.CharField(default='openweathermap', max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_data', to='weather_data.city')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalWeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('temperature_min', models.FloatField(help_text='Minimum temperature in Celsius')),
                ('temperature_max', models.FloatField(help_text='Maximum temperature in Celsius')),
                ('temperature_avg', models.FloatField(help_text='Average temperature in Celsius')),
                ('humidity_avg', models.IntegerField(help_text='Average humidity percentage')),
                ('pressure_avg', models.FloatField(help_text='Average atmospheric pressure in hPa')),
                ('wind_speed_avg', models.FloatField(help_text='Average wind speed in km/h')),
                ('precipitation_total', models.FloatField(default=0, help_text='Total precipitation in mm')),
                ('weather_condition', models.CharField(max_length=50)),
                ('data_source', models.CharField(default='openweathermap', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historical_data', to='weather_data.city')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('city', 'date', 'data_source')},
            },
        ),
        migrations.CreateModel(
            name='UserWeatherPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_favorite', models.BooleanField(default=False)),
                ('alert_enabled', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0, help_text="Display order for user's cities")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='weather_data.city')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['order', 'created_at'],
                'unique_together': {('user', 'city')},
            },
        ),
        migrations.CreateModel(
            name='WeatherForecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_date', models.DateTimeField()),
                ('temperature_min', models.FloatField(help_text='Minimum temperature in Celsius')),
                ('temperature_max', models.FloatField(help_text='Maximum temperature in Celsius')),
                ('temperature_avg', models.FloatField(help_text='Average temperature in Celsius')),
                ('humidity', models.IntegerField(help_text='Humidity percentage')),
                ('pressure', models.FloatField(help_text='Atmospheric pressure in hPa')),
                ('wind_speed', models.FloatField(help_text='Wind speed in km/h')),
                ('wind_direction', models.IntegerField(help_text='Wind direction in degrees')),
                ('weather_condition', models.CharField(max_length=50)),
                ('weather_description', models.CharField(max_length=100)),
                ('weather_icon', models.CharField(max_length=10)),
                ('cloudiness', models.IntegerField(help_text='Cloudiness percentage')),
                ('precipitation_probability', models.FloatField(default=0, help_text='Precipitation probability (0-1)')),
                ('precipitation_amount', models.FloatField(default=0, help_text='Precipitation amount in mm')),
                ('data_source', models.CharField(default='openweathermap', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forecasts', to='weather_data.city')),
            ],
            options={
                'ordering': ['forecast_date'],
                'unique_together': {('city', 'forecast_date', 'data_source')},
            },
        ),
        migrations.CreateModel(
            name='WeatherPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_date', models.DateTimeField()),
                ('predicted_temperature', models.FloatField(help_text='Predicted temperature in Celsius')),
                ('predicted_humidity', models.IntegerField(help_text='Predicted humidity percentage')),
                ('predicted_pressure', models.FloatField(help_text='Predicted pressure in hPa')),
                ('predicted_wind_speed', models.FloatField(help_text='Predicted wind speed in km/h')),
                ('predicted_condition', models.CharField(help_text='Predicted weather condition', max_length=50)),
                ('confidence_score', models.FloatField(help_text='Prediction confidence (0-1)')),
                ('model_version', models.CharField(default='v1.0', max_length=20)),
                ('features_used', models.JSONField(default=dict, help_text='Features used for prediction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='weather_data.city')),
            ],
            options={
                'ordering': ['prediction_date'],
                'unique_together': {('city', 'prediction_date', 'model_version')},
            },
        ),
    ]
